package com.euler.problems;
/*
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

/*
 * Any integer N can be expressed as follows: 
N = p1
a1 ( p2
a2 ( p3
a3 ( ...
where pn is a distinct prime number, and an is its exponent.
For example, 28 = 22
( 71
Furthermore, the number of divisors D(N) of any integer N can be computed from:
D(N) = (a1+1) ( (a2+1) ( (a3+1) ( ...
an being the exponents of the distinct prime numbers which are factors of N
For example, the number of divisors of 28 would thus be:
D(28) = (2+1)((1+1) = 3(2 = 6
A table of primes will be required to apply this relationship. The efficient preparation of a prime
table is already covered in the overview for Problem 7 and will not be discussed here. Since the
largest expected triangle number is within a 32-bit integer, a table containing primes up to 65500
would be more than sufficient. The following code assumes that this array of primes is already
available. 
 */
public class Problem12 {

	private int countDivisors(long num){
		long sqrt=(long)Math.sqrt(num);
		int count=0;
		for(int i=1;i<=sqrt;i++){
			if(num%i==0){
				count+=2;
			}
		}
		return count;
	}
	
	private int findFirstNdivisors(int n){
		int start=1;
		int triangle=0;//start*(start+1)/2;
		boolean found=false;
		boolean less=true;
		do{
			triangle=start*(start+1)/2;
			int divisors=countDivisors(triangle);
			System.out.println("start :" +start+ " triangle :"+triangle+ "  divisors"+divisors);
			
			if(divisors >=n){
				start--;
				if(less){
					return triangle;
				}
				less=false;
			}
			else {
				start++;
				if(!less){
					triangle=start*(start+1)/2;
					return triangle;
					
				}
				less=true;
			}
			
			
		}while(!found);
		return -1;
	}
	
	public static void main(String[] args){
		System.out.println(new Problem12().findFirstNdivisors(500));
	}

}
